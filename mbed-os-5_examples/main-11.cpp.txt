#include "mbed.h"

//#define USE_MUTEX

#define NUM_PRODUCERS  4

Serial pc( SERIAL_TX, SERIAL_RX, 115200 );
Mutex mutex;

char buf[64] = {0};
const char *ORDERS[] = {  "1st", "2nd", "3rd", "4th" };

void producer_func( void *arg ) {
   int id  = (int)arg;
   while (1) {
#ifdef USE_MUTEX
      mutex.lock();
#endif
      sprintf( buf, "Thread %d: ", id );
      Thread::yield();
      sprintf( buf+strlen(buf), "This is the %s task. ", ORDERS[id-1] );
#ifdef USE_MUTEX
      mutex.unlock();
#endif
      if ( rand() % 2 == 0 ) {
         Thread::wait(1);
      }
      else {
         Thread::yield();
      }
   }
}

void consumer_func( void *arg ) {
   while (1) {
#ifdef USE_MUTEX
      mutex.lock();
#endif
      if ( strlen(buf) > 0 ) {
         pc.printf( "%s\r\n", buf );
         buf[0] = '\0';
      }
#ifdef USE_MUTEX
      mutex.unlock();
#endif
      Thread::wait(500);
   }
}

int main() {
   AnalogIn ain(A0);
   Thread  consumer;
   Thread  producers[ NUM_PRODUCERS ];

   srand( ain.read_u16() );

   consumer.start( callback(consumer_func, (void *)0) );
   consumer.set_priority( osPriorityAboveNormal );

   for ( int i=1; i <= NUM_PRODUCERS; i++ ) {
     producers[i-1].start( callback( producer_func, (void *)i) );
   }

   Thread::wait( osWaitForever ); // Main Thread keeps waiting forever
}
